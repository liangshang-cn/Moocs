本系列课程的第一讲是Linux系统中Bash Shell编程。
我们使用shell编程时，一个最基本的功能是，通过组合一些基本的命令加参数的形式来做一些事情，比如 echo 命令可以像复读机一样打印文本，echo hello打印出来的就是hello。当然echo命令并不只是一个复读机，它还具备解释文本的作用，比如echo $PATH打印出来的是一个列表，这个列表包含了shell寻找所有命令（也叫programs）所依赖的路径。echo命令作为内建的基本命令之一，存储在/bin目录下（如果你不相信这点，也可以通过which echo 或者 whereis echo来验证）。所以当我们输入echo或任何一个其他命令时，shell都会遍历这个列表中的所有路径来确认命令的位置。命令存储位置不在这些路径下，自然就不会执行成功；那么可以在多个路径中存储同名的命令吗，如果可以，shell会如何进行选择呢？这个后面再说。

文件径分为绝对路径和相对路径，$PATH中存储的都是绝对路径。相对路径都依赖于当前工作路径。可以通过内置的pwd命令来查看当前工作路径，也可以通过cd命令来改变当前工作目录。（cd命令是我最常使用的命令之一，用cd命令代替手动点击文件夹图标来切换工作路径，很爽！）一个点代表当前路径，两个点代表父路径，~代表根目录， - 代表上一个目录。记住这些shorcut也可以使得cd命令更加好用

ls命令可以列出在当前目录下的所有文件，更进一步地，ls -l命令可以列出文件列表的详细信息，其中就包括了文件的权限信息，比如 -rwxr-xr-x 其中第一个-表示这是一个文件，如果变成d则表示这是一个目录而非文件本身；后面有三组，分别表示当前用户、用户组和其他用户的读、写、执行权限，不具备这些权限则用-代替。对于文件，其读、写、执行权限是比较好理解的；而对于目录，读权限表示可以查看该目录下有哪些文件；写权限表示可以在该目录下新增或删除文件（所以文件的删除不是由文件自身控制的，而是由文件所在的目录控制的）；执行权限表示可以用户访问到该目录。

mv命令可用于文件的移动，也可以使用mv命令对文件进行重命名；cp命令用于文件的复制。如果是移动或者拷贝一个目录下的文件，需要用-r去递归地完成。

查找一个命令的作用，可以使用man xx 或者 xx --help命令来完成。

通过<和>来改变输入输出流，比如 echo hello > hello.txt hello不会打印出来，而是会写入到hello.txt文件中。cat < hello.txt也会从文件中读入文本。

管道 | 以左侧输出的结果作为右侧命令的输入

sudo tee 命令

xdg-open可以选中合适的应用打开该文件。
